using UnityEngine;
using System.Collections;

[RequireComponent(typeof(Entity_Health))]
public class Player_Invulnerability : MonoBehaviour
{
    private Entity_Health health;
    private bool isInvulnerable;
    private Coroutine invulnRoutine;

    public bool IsInvulnerable => isInvulnerable;

    private void Awake()
    {
        health = GetComponent<Entity_Health>();
    }

    /// <summary>
    /// Makes the player invulnerable for a set duration (for roll, hurt, etc.)
    /// </summary>
    public void SetTemporaryInvulnerability(float duration)
    {
        if (invulnRoutine != null)
            StopCoroutine(invulnRoutine);
        invulnRoutine = StartCoroutine(TemporaryInvulnerabilityRoutine(duration));
    }

    private IEnumerator TemporaryInvulnerabilityRoutine(float duration)
    {
        isInvulnerable = true;
        Debug.Log($"[Player_Invulnerability] {name} invulnerable for {duration:F2}s");
        yield return new WaitForSeconds(duration);
        isInvulnerable = false;
        Debug.Log($"[Player_Invulnerability] {name} invulnerability ended.");
    }

    // Called by TakeDamage intercept (see next step)
    public bool ShouldIgnoreDamage() => isInvulnerable;
}
